pub struct Memory {
    bus: [u8; 4096],
}

impl Memory {
    pub fn new() -> Memory {
        let mut memory = Memory {
            bus: [0; 4096],
        };
        memory.load_fontset();
        memory
    }

    pub fn load_program(&mut self, data: &Vec<u8>) {
        for (i, &byte) in data.iter().enumerate() {
            self.bus[0x200 + i] = byte;
        }
    }

    pub fn read_byte(&self, address: u16) -> u8 {
        self.bus[address as usize]
    }

    pub fn write_byte(&mut self, address: u16, byte: u8) {
        self.bus[address as usize] = byte;
    }

    fn load_fontset(&mut self) {
        for i in 0..FONTSET.len() {
            self.bus[i] = FONTSET[i];
        }
    }
}

const FONTSET: [u8; 80] = [    
    0xF0, 0x90, 0x90, 0x90, 0xF0, // 0
    0x20, 0x60, 0x20, 0x20, 0x70, // 1
    0xF0, 0x10, 0xF0, 0x80, 0xF0, // 2
    0xF0, 0x10, 0xF0, 0x10, 0xF0, // 3
    0x90, 0x90, 0xF0, 0x10, 0x10, // 4
    0xF0, 0x80, 0xF0, 0x10, 0xF0, // 5
    0xF0, 0x80, 0xF0, 0x90, 0xF0, // 6
    0xF0, 0x10, 0x20, 0x40, 0x40, // 7
    0xF0, 0x90, 0xF0, 0x90, 0xF0, // 8
    0xF0, 0x90, 0xF0, 0x10, 0xF0, // 9
    0xF0, 0x90, 0xF0, 0x90, 0x90, // A
    0xE0, 0x90, 0xE0, 0x90, 0xE0, // B
    0xF0, 0x80, 0x80, 0x80, 0xF0, // C
    0xE0, 0x90, 0x90, 0x90, 0xE0, // D
    0xF0, 0x80, 0xF0, 0x80, 0xF0, // E
    0xF0, 0x80, 0xF0, 0x80, 0x80  // F
];